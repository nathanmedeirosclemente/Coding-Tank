// Estruturas de Dados
maxHeap: heap ordenado por score decrescente
indexMap: mapa {pedidoID → posição no heap}

// Cálculo do Score Composto
FUNÇÃO calcularScore(pedido):
    priorityNorm ← pedido.priorityScore / 100
    urgência ← 100 / (pedido.dispatchWindow + 1)
    penalidade ← MAPA_TAMANHO[pedido.sizeCategory]  // P:0, M:-5, G:-10
    
    scoreComposto ← 0.3 × priorityNorm + 0.6 × urgência + 0.1 × penalidade
    RETORNAR score

// Operações Principais
FUNÇÃO inserir(pedido):
   	scoreComposto ← calcularScore(pedido)
    maxHeap.insert(pedido, score)
    indexMap[pedido.id] ← posição_inserida

FUNÇÃO expedir():
    pedido ← maxHeap.extractMax()
    indexMap.remove(pedido.id)
    RETORNAR pedido

FUNÇÃO atualizarPrioridade(pedidoID):
    pos ← indexMap[pedidoID]
    pedido ← maxHeap.get(pos)
    novoScore ← calcularScore(pedido)
    maxHeap.heapify(pos, novoScore)  // O(log n)